// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// prior_LN
double prior_LN(NumericVector beta, double sigma2, int prior, bool logs);
RcppExport SEXP _BASSLINE_prior_LN(SEXP betaSEXP, SEXP sigma2SEXP, SEXP priorSEXP, SEXP logsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< bool >::type logs(logsSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_LN(beta, sigma2, prior, logs));
    return rcpp_result_gen;
END_RCPP
}
// prior_nu
NumericVector prior_nu(NumericVector nu, int prior);
RcppExport SEXP _BASSLINE_prior_nu(SEXP nuSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_nu(nu, prior));
    return rcpp_result_gen;
END_RCPP
}
// prior_LST
NumericVector prior_LST(NumericVector beta, double sigma2, NumericVector nu, int prior, bool logs);
RcppExport SEXP _BASSLINE_prior_LST(SEXP betaSEXP, SEXP sigma2SEXP, SEXP nuSEXP, SEXP priorSEXP, SEXP logsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< bool >::type logs(logsSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_LST(beta, sigma2, nu, prior, logs));
    return rcpp_result_gen;
END_RCPP
}
// J_alpha
NumericVector J_alpha(NumericVector alpha, int k);
RcppExport SEXP _BASSLINE_J_alpha(SEXP alphaSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(J_alpha(alpha, k));
    return rcpp_result_gen;
END_RCPP
}
// II_alpha
NumericVector II_alpha(NumericVector alpha);
RcppExport SEXP _BASSLINE_II_alpha(SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(II_alpha(alpha));
    return rcpp_result_gen;
END_RCPP
}
// I_alpha
NumericVector I_alpha(NumericVector alpha);
RcppExport SEXP _BASSLINE_I_alpha(SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(I_alpha(alpha));
    return rcpp_result_gen;
END_RCPP
}
// prior_alpha
NumericVector prior_alpha(NumericVector alpha, int k, int prior);
RcppExport SEXP _BASSLINE_prior_alpha(SEXP alphaSEXP, SEXP kSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_alpha(alpha, k, prior));
    return rcpp_result_gen;
END_RCPP
}
// prior_LEP
NumericVector prior_LEP(NumericVector beta, float sigma2, NumericVector alpha, int prior, bool logs);
RcppExport SEXP _BASSLINE_prior_LEP(SEXP betaSEXP, SEXP sigma2SEXP, SEXP alphaSEXP, SEXP priorSEXP, SEXP logsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< bool >::type logs(logsSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_LEP(beta, sigma2, alpha, prior, logs));
    return rcpp_result_gen;
END_RCPP
}
// r_GIG
double r_GIG(double r);
RcppExport SEXP _BASSLINE_r_GIG(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_GIG(r));
    return rcpp_result_gen;
END_RCPP
}
// Log_aux
double Log_aux(NumericVector lambda, double y, int j_nu, NumericVector nu, int prior);
RcppExport SEXP _BASSLINE_Log_aux(SEXP lambdaSEXP, SEXP ySEXP, SEXP j_nuSEXP, SEXP nuSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type j_nu(j_nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(Log_aux(lambda, y, j_nu, nu, prior));
    return rcpp_result_gen;
END_RCPP
}
// d_texp
double d_texp(double x, double trunc);
RcppExport SEXP _BASSLINE_d_texp(SEXP xSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(d_texp(x, trunc));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BASSLINE_prior_LN", (DL_FUNC) &_BASSLINE_prior_LN, 4},
    {"_BASSLINE_prior_nu", (DL_FUNC) &_BASSLINE_prior_nu, 2},
    {"_BASSLINE_prior_LST", (DL_FUNC) &_BASSLINE_prior_LST, 5},
    {"_BASSLINE_J_alpha", (DL_FUNC) &_BASSLINE_J_alpha, 2},
    {"_BASSLINE_II_alpha", (DL_FUNC) &_BASSLINE_II_alpha, 1},
    {"_BASSLINE_I_alpha", (DL_FUNC) &_BASSLINE_I_alpha, 1},
    {"_BASSLINE_prior_alpha", (DL_FUNC) &_BASSLINE_prior_alpha, 3},
    {"_BASSLINE_prior_LEP", (DL_FUNC) &_BASSLINE_prior_LEP, 5},
    {"_BASSLINE_r_GIG", (DL_FUNC) &_BASSLINE_r_GIG, 1},
    {"_BASSLINE_Log_aux", (DL_FUNC) &_BASSLINE_Log_aux, 5},
    {"_BASSLINE_d_texp", (DL_FUNC) &_BASSLINE_d_texp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BASSLINE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
